package com.treeze.frame;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.GridLayout;import java.awt.Insets;import java.awt.Toolkit;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import javax.swing.BoxLayout;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JMenu;import javax.swing.JMenuBar;import javax.swing.JMenuItem;import javax.swing.JPanel;import javax.swing.JToolBar;import com.treeze.data.ClassInfo;import com.treeze.data.MindNode;import com.treeze.data.TreezeStaticData;import com.treeze.draw.NoteManager;import com.treeze.draw.PPTPanel;public class MainFrameManager extends JFrame implements ActionListener {	JPanel fullPanel = new JPanel();	Dimension screenSize;	MindMapMain mindmapPanel;	PPTPanel pptPanel;	MindNode node;		JPanel topPanel = new JPanel();	JPanel topLeftPanel;	JPanel topRightPanel = new JPanel();;	ClassInfo classInfo;	JMenuBar jMenuBar = new JMenuBar();	private JMenu noteMenu;	private JMenu helpMenu;	private JMenu formatMenu;			ArrayList<PPTPanel> ptPanelAL;	public MainFrameManager(MindMapMain mindmapPanel, ClassInfo classInfo) {		// TODO Auto-generated constructor stub		// Jme				ptPanelAL = new ArrayList<PPTPanel>();				noteMenu = new JMenu("ÇÊ±â");		noteMenu.setMnemonic('N');		helpMenu = new JMenu("Help");		helpMenu.setMnemonic('H');		// Create file menu items		JMenuItem black_Pen_Item = new JMenuItem("°ËÁ¤Ææ");		JMenuItem red_Pen_Item = new JMenuItem("»¡°£Ææ");		JMenuItem yellow_Pen_Item = new JMenuItem("Çü±¤Ææ");		// aboutItem.setMnemonic(1);		black_Pen_Item.setMnemonic('1');		black_Pen_Item.setEnabled(true);		black_Pen_Item.addActionListener(this);		red_Pen_Item.setMnemonic('2');		red_Pen_Item.setEnabled(true);		red_Pen_Item.addActionListener(this);		yellow_Pen_Item.setMnemonic('3');		yellow_Pen_Item.setEnabled(true);		yellow_Pen_Item.addActionListener(this);		// Add to menu		noteMenu.add(black_Pen_Item);		noteMenu.add(red_Pen_Item);		noteMenu.add(yellow_Pen_Item);		noteMenu.addSeparator();				JMenuItem bug_Report  = new JMenuItem("Bug Report");		JMenuItem check_Update = new JMenuItem("Check Update");		JMenuItem project_Site = new JMenuItem("Project Site");		bug_Report.setMnemonic('b');		bug_Report.setEnabled(true);		bug_Report.addActionListener(this);		check_Update.setMnemonic('c');		check_Update.setEnabled(true);		check_Update.addActionListener(this);		project_Site.setMnemonic('p');		project_Site.setEnabled(true);		project_Site.addActionListener(this);				helpMenu.add(bug_Report);		helpMenu.add(check_Update);		helpMenu.add(project_Site);		helpMenu.addSeparator();		setJMenuBar(jMenuBar);		jMenuBar.add(noteMenu);		jMenuBar.add(helpMenu);	    JToolBar noteToolBar = new JToolBar();                JPanel panel = new JPanel();        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));        ImageIcon black_Pen_Img = TreezeStaticData.makeResizedImageIcon(15, 15, TreezeStaticData.BLACK_PEN_IMG);        ImageIcon red_Pen_Img = TreezeStaticData.makeResizedImageIcon(15, 15, TreezeStaticData.RED_PEN_IMG);        ImageIcon yellow_Pen_Img = TreezeStaticData.makeResizedImageIcon(15, 15, TreezeStaticData.YELLOW_PEN_IMG);                JButton blackPenBtn = new JButton(black_Pen_Img);        JButton redPenBtn = new JButton(red_Pen_Img);        JButton yellowPenBtn = new JButton(yellow_Pen_Img);        noteToolBar.add(blackPenBtn);        noteToolBar.add(redPenBtn);        noteToolBar.add(yellowPenBtn);        noteToolBar.setAlignmentX(0);        panel.add(noteToolBar);       			this.mindmapPanel = mindmapPanel;		this.classInfo = classInfo;		topPanel.setLayout(new GridLayout(1, 2));		mindmapPanel.setMainFrameManager(this);		screenSize = Toolkit.getDefaultToolkit().getScreenSize();		setSize(screenSize.width, screenSize.height);		topLeftPanel = new JPanel();		topPanel.add(topLeftPanel);		topPanel.add(topRightPanel);		this.setLayout(new BorderLayout());			fullPanel.setLayout(new GridLayout(2, 1));		fullPanel.add(topPanel);		fullPanel.add(mindmapPanel);		add(panel, BorderLayout.NORTH);		this.add(fullPanel);		this.setResizable(false);		changeTopPanel(MindNode.getRoot().getChildeNodes().get(0));		setVisible(true);				//added by doo mindnode Array list 							}				private PPTPanel getPtPanelByMindNode(MindNode node) {				String nodeId= node.getNodeID();				System.out.println(ptPanelAL);				for(int i = 0; i < ptPanelAL.size(); i++) {			String ptNodeId = ptPanelAL.get(i).getNodeID();						if(nodeId.equals(ptNodeId)) 				return ptPanelAL.get(i); 		}		return null;	}			public void changeTopPanel(MindNode node) {		this.node = node;				//Á¦°Å ÇÏ±âÀü¿¡ ÇÇÇÇÆ¼¸¦ ÀúÀåÇÔ		if(topLeftPanel != null && topLeftPanel instanceof PPTPanel) {			System.out.println("store");			((PPTPanel)topLeftPanel).saveNote();		}		topPanel.remove(topLeftPanel);		topPanel.remove(topRightPanel);		fullPanel.remove(topPanel);		fullPanel.remove(mindmapPanel);		//		PPTPanel ptPanel = getPtPanelByMindNode(node);		//		if(ptPanel == null) {//			topLeftPanel = new PPTPanel(node, this);//			ptPanelAL.add((PPTPanel)topLeftPanel);//		}else {//			topLeftPanel = ptPanel;//		}		topLeftPanel = new PPTPanel(node, this);		topRightPanel = new TicketFrame(node, classInfo);		resetAllPanel();	}	public void resetAllPanel() {		topPanel.add(topLeftPanel);		topPanel.add(topRightPanel);		fullPanel.add(topPanel);		fullPanel.add(mindmapPanel);		topPanel.setVisible(false);		topPanel.setVisible(true);	}	public void ticketRepaint(MindNode node) {		if (this.node != null && this.node == node) {			node.getTicketBtn().setVisible(false);			topPanel.remove(topRightPanel);			topRightPanel = new TicketFrame(node, classInfo);			topPanel.add(topRightPanel);			topPanel.setVisible(false);			topPanel.setVisible(true);		}	}	@Override	public void actionPerformed(ActionEvent event) {		// TODO Auto-generated method stub				PPTPanel curPtPanel = (PPTPanel)topLeftPanel;		if (event.getActionCommand().equals("°ËÁ¤Ææ"))			curPtPanel.setBlackPen();//			System.out.println("asdfsadfsadfsdaf°ËÁ¤»ö");		else if (event.getActionCommand().equals("»¡°£Ææ"))			curPtPanel.setRedPen();		else if (event.getActionCommand().equals("Çü±¤Ææ"))			curPtPanel.setHighliter();		else if (event.getActionCommand().equals("Bug Report"))			System.out.println("Bug Report");		else if (event.getActionCommand().equals("Check Update"))			System.out.println("Check Update");		else if (event.getActionCommand().equals("Project Site"))			System.out.println("Project Site");			}}