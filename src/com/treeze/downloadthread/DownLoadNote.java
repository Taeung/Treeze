package com.treeze.downloadthread;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.util.ArrayList;import javax.print.attribute.standard.MediaSize.Other;import javax.swing.text.html.HTMLEditorKit.Parser;import com.google.gson.Gson;import com.treeze.Module.CreateNoteFileThread;import com.treeze.data.Note;import com.treeze.data.Outside;import com.treeze.data.TreezeStaticData;import com.treeze.draw.ComponentJPanel;import com.treeze.draw.DrawableObject;import com.treeze.draw.NoteManager;/* * 만약에 파일존재시 파일에서 가져오고 아니면  * 아니면 네트워크 자원에서 가져오자 */import com.treeze.draw.StoredNoteObject;public class DownLoadNote  extends Thread{	// HttpResponse response;	// InputStream is;	URL url = null;	String ip = TreezeStaticData.IP;	// Message msg = new Message();	StringBuffer sbResult = new StringBuffer();		private String classId;	private String userEmail;	private String nodeId;	private NoteManager nm;	public DownLoadNote(String classId, String userEmail, String nodeId) {		// TODO Auto-generated constructor stub				this.classId = classId;		this.userEmail = userEmail;		this.nodeId = nodeId;		this.nm = nm;		this.setPriority(MAX_PRIORITY);			}		@Override	public void run() {		// TODO Auto-generated method stub		HttpURLConnection connection;		sbResult.delete(0, sbResult.capacity());		try {			url = new URL("http://" + ip					+ ":8080/treeze/getNote?classId="					+ classId + "&" +"userEmail=" + userEmail + "&" + "nodeId=" + nodeId);					connection = (HttpURLConnection) url.openConnection();			if (connection != null) {				connection.setConnectTimeout(5000); // Set Timeout				connection.setUseCaches(false);				if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {					BufferedReader br = new BufferedReader(							new InputStreamReader(connection.getInputStream(),									"UTF-8"));					String strLine = null;					while ((strLine = br.readLine()) != null) {						sbResult.append(strLine + "\n");					}					br.close();				}				connection.disconnect();				Gson gson = new Gson();								Outside outside = gson.fromJson(sbResult.toString(), Outside.class);				Note note = outside.Note;				StoredNoteObject sno = gson.fromJson(note.getContents(), StoredNoteObject.class);				CreateNoteFileThread createNoteFileThread = new CreateNoteFileThread((long) Integer.parseInt(classId), nodeId, note.getContents(), userEmail);			createNoteFileThread.start();								// networkHandler.sendMessage(msg);			}		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}			}					public StoredNoteObject getNoteFromServer() {		HttpURLConnection connection;		sbResult.delete(0, sbResult.capacity());		try {			url = new URL("http://" + ip					+ ":8080/treeze/getNotes?classId="					+ classId + "&" +"userEmail=" + userEmail + "&" + "nodeId=" + nodeId);			connection = (HttpURLConnection) url.openConnection();			if (connection != null) {				connection.setConnectTimeout(5000); // Set Timeout				connection.setUseCaches(false);				if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {					BufferedReader br = new BufferedReader(							new InputStreamReader(connection.getInputStream(),									"UTF-8"));					String strLine = null;					while ((strLine = br.readLine()) != null) {						sbResult.append(strLine + "\n");					}					br.close();				}				connection.disconnect();				Gson gson = new Gson();				return gson.fromJson(sbResult.toString(), StoredNoteObject.class);				// networkHandler.sendMessage(msg);			}		} catch (IOException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		return null;	}}