package com.treeze.draw;import java.awt.BasicStroke;import java.awt.Color;import java.awt.Cursor;import java.awt.Image;import java.awt.Point;import java.awt.Toolkit;public class StateManager {		private static StateManager sm;		// draw type	public static int DRAW_TYPE_CIRCLE = 0;	public static int DRAW_TYPE_RECTANGLE = 1;	public static int DRAW_TYPE_X = 2;	public static int DRAW_TYPE_LINE = 3;	public static int DRAW_TYPE_STAR = 4;	public static int DRAW_TYPE_ARROW = 5;	// public static int DRAW_TYPE_RECTANGLE = 6;	// keycode	public static final int KEY_CODE_MODE = 192;	public static final int KEY_CODE_ONE = 49;	public static final int KEY_CODE_TWO = 50;	public static final int KEY_CODE_THREE = 51;	public static final int KEY_CODE_FOUR = 52;	public static final int KEY_CODE_FIVE = 53;	public static final int KEY_CODE_SIX = 54;	public static final int KEY_CODE_SHIFT = 16;	public static final int KEY_CODE_E = 69;	public static final int KEY_CODE_DEL = 127;	// 필기 모드	public static final int NOTE_MODE_PEN = 0;	public static final int NOTE_MODE_FIGURE = 1;	public static final int NOTE_MODE_ERASER = 2;	public static final int NOTE_MODE_GRAB = 3;	// figure type	public static final int FIGURE_TYPE_STAR = 0;	public static final int FIGURE_TYPE_ARROW = 1;	public static final int FIGURE_TYPE_CIRCLE = 2;	public static final int FIGURE_TYPE_X = 3;	public static final int FIGURE_TYPE_REC = 4;	public static final int FIGURE_TYPE_TEXT = 5;	// LineMode	public static final int LINE_MODE_STRAIGHT = 0;	public static final int LINE_MODE_CURVE = 1;	// button	public static final int CLICK_BUTTON_LEFT = 1;	public static final int CLICK_BUTTON_RIGHT = 3;		public static final int MOUSE_STATE_CLICK = 0;	public static final int MOUSE_STATE_RELEASED = 1;	public static final int MOUSE_STATE_PRESSED = 2;	public static final int MOUSE_STATE_DRAGGED = 3;		public static final int PEN_MODE_BLACK = 0;	public static final int PEN_MODE_RED = 1;	public static final int PEN_MODE_HIGHLIGHTER = 2;	private int curPenMode;	private int curNoteMode;	private int curFigureMode;	private int curLineMode;	private int curMouseMode;	private int exMouseMode;		private boolean changeSizeFlag = false;	private boolean moveFlag = false;		Color color;	BasicStroke bs;		// this is for cursor	private Toolkit toolkit;	private Image image;	Point hotspot;	// pen cursor;	public static Cursor blackPenCursor;	public static Cursor redPenCursor;	public static Cursor highliterCursor;	public static Cursor figureCursor;	public static Cursor eraserCursor;	// figure cursor;	public static Cursor starCursor;	public static Cursor arrowCursor;	public static Cursor circleCursor;	public static Cursor XCursor;	public static Cursor recCursor;	public static Cursor textCursor;	public static Cursor moveCursor;	public static Cursor changeSizeLeftCursor;	public static Cursor changeSizeRightCursor;			private Cursor curCursor;		private StateManager() {		initCursor();	}		public static StateManager getStateManager() {		if (sm == null) {			sm = new StateManager();		}		return sm;	}		public int getCurNoteMode() {		return curNoteMode;	}	public void setCurNoteMode(int curNoteMode) {		this.curNoteMode = curNoteMode;	}	public int getCurFigureMode() {		return curFigureMode;	}	public void setCurFigureMode(int curFigureMode) {		this.curFigureMode = curFigureMode;	}	public int getCurLineMode() {		return curLineMode;	}	public void setCurLineMode(int curLineMode) {		this.curLineMode = curLineMode;	}	public int getCurMouseMode() {		return curMouseMode;	}	public void setCurMouseMode(int curMouseMode) {		this.curMouseMode = curMouseMode;	}	public int getExMouseMode() {		return exMouseMode;	}	public void setExMouseMode(int exMouseMode) {		this.exMouseMode = exMouseMode;	}	public boolean isChangeSizeFlag() {		return changeSizeFlag;	}	public void setChangeSizeFlag(boolean changeSizeFlag) {		this.changeSizeFlag = changeSizeFlag;	}	public boolean isMoveFlag() {		return moveFlag;	}	public void setMoveFlag(boolean moveFlag) {		this.moveFlag = moveFlag;	}		public Color getColor() {		return color;	}	public void setColor(Color color) {		this.color = color;	}	public BasicStroke getBs() {		return bs;	}	public void setBs(BasicStroke bs) {		this.bs = bs;	}		private void initCursor() {		toolkit = Toolkit.getDefaultToolkit();		hotspot = new Point(0, 30);		image = toolkit.getImage(getClass().getResource(Util.IMG_ADDR + "pen.png"));		blackPenCursor = toolkit.createCustomCursor(image, hotspot, "blackpen");		image = toolkit.getImage(getClass().getResource(Util.IMG_ADDR + "redpen.png"));		redPenCursor = toolkit.createCustomCursor(image, hotspot, "redpen");		image = toolkit.getImage(getClass().getResource(Util.IMG_ADDR + "highlighter.png"));		highliterCursor = toolkit.createCustomCursor(image, hotspot, "highliter");				image = toolkit.getImage(getClass().getResource(Util.IMG_ADDR + "eraser.png"));		eraserCursor = toolkit.createCustomCursor(image, hotspot, "eraser");				image = toolkit.getImage(getClass().getResource(Util.IMG_ADDR + "move.png"));		moveCursor = toolkit.createCustomCursor(image, hotspot, "move");						hotspot = new Point(5, 5);				image = toolkit.getImage(getClass().getResource(Util.IMG_ADDR + "star.png"));		starCursor = toolkit.createCustomCursor(image, hotspot, "star");		image = toolkit.getImage(getClass().getResource(Util.IMG_ADDR + "figure.png"));		figureCursor = toolkit.createCustomCursor(image, hotspot, "figure");			image = toolkit.getImage(getClass().getResource(Util.IMG_ADDR + "arrow.png"));		arrowCursor = toolkit.createCustomCursor(image, hotspot, "arrow");					image = toolkit.getImage(getClass().getResource(Util.IMG_ADDR + "size_left.png"));		changeSizeLeftCursor = toolkit.createCustomCursor(image, hotspot, "changesizeleft");				image = toolkit.getImage(getClass().getResource(Util.IMG_ADDR + "size_right.png"));		changeSizeRightCursor = toolkit.createCustomCursor(image, hotspot, "changesizeright");				hotspot = new Point(0, 0);		image = toolkit.getImage(getClass().getResource(Util.IMG_ADDR + "circle.png"));		circleCursor = toolkit.createCustomCursor(image, hotspot, "circle");				image = toolkit.getImage(getClass().getResource(Util.IMG_ADDR + "rectangle.png"));		recCursor = toolkit.createCustomCursor(image, hotspot, "rect");		image = toolkit.getImage(getClass().getResource(Util.IMG_ADDR + "X.png"));		XCursor = toolkit.createCustomCursor(image, hotspot, "X");		image = toolkit.getImage(Util.IMG_ADDR + "text.png");		textCursor = toolkit.createCustomCursor(image, hotspot, "text");			}				public int getCurPenMode() {		return curPenMode;	}	public void setCurPenMode(int curPenMode) {		this.curPenMode = curPenMode;	}		public Cursor getCurCursor() {		return curCursor;	}	public void setCurCursor(Cursor curCursor) {		this.curCursor = curCursor;	}		public Cursor getCurStateCursor() {				if(curNoteMode == NOTE_MODE_PEN) {						if(curPenMode == PEN_MODE_BLACK) {				return blackPenCursor;			}else if(curPenMode == PEN_MODE_RED) {				return redPenCursor;			}else if(curPenMode == PEN_MODE_HIGHLIGHTER) {				return highliterCursor;			}					}else if(curNoteMode == NOTE_MODE_FIGURE) {						if(curFigureMode == FIGURE_TYPE_ARROW) {				return arrowCursor;			}else if(curFigureMode == FIGURE_TYPE_CIRCLE) {				return circleCursor;			}else if(curFigureMode == FIGURE_TYPE_REC) {				return recCursor;			}else if(curFigureMode == FIGURE_TYPE_STAR) {				return starCursor;			}else if(curFigureMode == FIGURE_TYPE_X) {				return XCursor;			}					}else if(curNoteMode == NOTE_MODE_ERASER) {			return eraserCursor;		}				return null;	}}